// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelRecommendationSystem.Data;

#nullable disable

namespace TravelRecommendationSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250918160922_AddEuropeanDestinations")]
    partial class AddEuropeanDestinations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Attraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("EntryFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpeningHours")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.ToTable("Attractions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Champ de Mars, 5 Avenue Anatole France, 75007 Paris",
                            AverageRating = 4.5m,
                            Category = "Landmark",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(2135),
                            Description = "Iconic iron tower and symbol of Paris, offering panoramic views of the city.",
                            DestinationId = 1,
                            EntryFee = 26.80m,
                            ImageUrl = "https://images.unsplash.com/photo-1511739001486-6bfe10ce785f?w=800",
                            IsActive = true,
                            Latitude = 48.8584m,
                            Longitude = 2.2945m,
                            Name = "Eiffel Tower",
                            OpeningHours = "9:30 AM - 11:45 PM",
                            TotalReviews = 2341,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(2136)
                        },
                        new
                        {
                            Id = 2,
                            Address = "2 Chome-3-1 Asakusa, Taito City, Tokyo",
                            AverageRating = 4.6m,
                            Category = "Temple",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(2142),
                            Description = "Ancient Buddhist temple and Tokyo's oldest, located in Asakusa district.",
                            DestinationId = 2,
                            EntryFee = 0m,
                            ImageUrl = "https://images.unsplash.com/photo-1545569341-9eb8b30979d9?w=800",
                            IsActive = true,
                            Latitude = 35.7148m,
                            Longitude = 139.7967m,
                            Name = "Senso-ji Temple",
                            OpeningHours = "6:00 AM - 5:00 PM",
                            TotalReviews = 1876,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(2142)
                        });
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccommodationType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Adults")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BookingReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("BookingType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Children")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConfirmationEmailSent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<int>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FlightIncluded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProviderBookingUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("TransferIncluded")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AveragePriceLevel")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("BestTimeToVisit")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Climate")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AveragePriceLevel = 3,
                            AverageRating = 4.6m,
                            BestTimeToVisit = "April to June, September to October",
                            Climate = "Temperate oceanic",
                            Country = "France",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1330),
                            Description = "The City of Light, known for its art, fashion, gastronomy, and culture. Home to iconic landmarks like the Eiffel Tower and Louvre Museum.",
                            ImageUrl = "https://images.unsplash.com/photo-1502602898536-47ad22581b52?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = 48.8566m,
                            Longitude = 2.3522m,
                            Name = "Paris",
                            Region = "Île-de-France",
                            TotalReviews = 1245,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1331)
                        },
                        new
                        {
                            Id = 2,
                            AveragePriceLevel = 3,
                            AverageRating = 4.8m,
                            BestTimeToVisit = "March to May, September to November",
                            Climate = "Humid subtropical",
                            Country = "Japan",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1338),
                            Description = "A vibrant metropolis blending ultra-modern and traditional elements. Experience cutting-edge technology alongside ancient temples.",
                            ImageUrl = "https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = 35.6762m,
                            Longitude = 139.6503m,
                            Name = "Tokyo",
                            Region = "Kanto",
                            TotalReviews = 987,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1338)
                        },
                        new
                        {
                            Id = 3,
                            AveragePriceLevel = 3,
                            AverageRating = 4.7m,
                            BestTimeToVisit = "April to early November",
                            Climate = "Mediterranean",
                            Country = "Greece",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1344),
                            Description = "A stunning Greek island known for its white-washed buildings, blue-domed churches, and breathtaking sunsets over the Aegean Sea.",
                            ImageUrl = "https://images.unsplash.com/photo-1613395877344-13d4a8e0d49e?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = 36.3932m,
                            Longitude = 25.4615m,
                            Name = "Santorini",
                            Region = "South Aegean",
                            TotalReviews = 756,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1344)
                        },
                        new
                        {
                            Id = 4,
                            AveragePriceLevel = 2,
                            AverageRating = 4.5m,
                            BestTimeToVisit = "April to October",
                            Climate = "Tropical",
                            Country = "Indonesia",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1349),
                            Description = "A tropical paradise offering beautiful beaches, ancient temples, lush rice terraces, and a rich cultural heritage.",
                            ImageUrl = "https://images.unsplash.com/photo-1537953773345-d172ccf13cf1?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = -8.3405m,
                            Longitude = 115.0920m,
                            Name = "Bali",
                            Region = "Lesser Sunda Islands",
                            TotalReviews = 1123,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1350)
                        },
                        new
                        {
                            Id = 5,
                            AveragePriceLevel = 3,
                            AverageRating = 4.7m,
                            BestTimeToVisit = "April to June, September to October",
                            Climate = "Mediterranean",
                            Country = "Italy",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1355),
                            Description = "The Eternal City, home to ancient Roman ruins, Vatican City, incredible art, and world-renowned cuisine.",
                            ImageUrl = "https://images.unsplash.com/photo-1515542622106-78bda8ba0e5b?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = 41.9028m,
                            Longitude = 12.4964m,
                            Name = "Rome",
                            Region = "Lazio",
                            TotalReviews = 2156,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1355)
                        },
                        new
                        {
                            Id = 6,
                            AveragePriceLevel = 2,
                            AverageRating = 4.6m,
                            BestTimeToVisit = "May to June, September to October",
                            Climate = "Mediterranean",
                            Country = "Spain",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1361),
                            Description = "A vibrant city known for Gaudí's architecture, beautiful beaches, rich culture, and amazing nightlife.",
                            ImageUrl = "https://images.unsplash.com/photo-1539037116277-4db20889f2d4?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = 41.3851m,
                            Longitude = 2.1734m,
                            Name = "Barcelona",
                            Region = "Catalonia",
                            TotalReviews = 1876,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1361)
                        },
                        new
                        {
                            Id = 7,
                            AveragePriceLevel = 3,
                            AverageRating = 4.5m,
                            BestTimeToVisit = "April to May, September to November",
                            Climate = "Oceanic",
                            Country = "Netherlands",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1366),
                            Description = "A charming city famous for its canals, museums, vibrant culture, and liberal atmosphere.",
                            ImageUrl = "https://images.unsplash.com/photo-1534351590666-13e3e96b5017?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = 52.3676m,
                            Longitude = 4.9041m,
                            Name = "Amsterdam",
                            Region = "North Holland",
                            TotalReviews = 1432,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1366)
                        },
                        new
                        {
                            Id = 8,
                            AveragePriceLevel = 3,
                            AverageRating = 4.4m,
                            BestTimeToVisit = "May to September",
                            Climate = "Temperate oceanic",
                            Country = "United Kingdom",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1438),
                            Description = "A historic and cosmopolitan capital offering world-class museums, theaters, royal palaces, and diverse neighborhoods.",
                            ImageUrl = "https://images.unsplash.com/photo-1513635269975-59663e0ac1ad?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = 51.5074m,
                            Longitude = -0.1278m,
                            Name = "London",
                            Region = "England",
                            TotalReviews = 3421,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1439)
                        },
                        new
                        {
                            Id = 9,
                            AveragePriceLevel = 2,
                            AverageRating = 4.6m,
                            BestTimeToVisit = "April to May, September to October",
                            Climate = "Continental",
                            Country = "Austria",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1444),
                            Description = "Imperial elegance meets modern culture in this musical capital famous for its coffee houses, palaces, and classical heritage.",
                            ImageUrl = "https://images.unsplash.com/photo-1516550135131-fe3dcb0bedc7?w=800",
                            IsActive = true,
                            IsFeatured = false,
                            Latitude = 48.2082m,
                            Longitude = 16.3738m,
                            Name = "Vienna",
                            Region = "Vienna",
                            TotalReviews = 987,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1444)
                        },
                        new
                        {
                            Id = 10,
                            AveragePriceLevel = 1,
                            AverageRating = 4.7m,
                            BestTimeToVisit = "March to May, September to November",
                            Climate = "Continental",
                            Country = "Czech Republic",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1449),
                            Description = "A fairytale city with stunning medieval architecture, charming bridges, and vibrant nightlife at affordable prices.",
                            ImageUrl = "https://images.unsplash.com/photo-1541849546-216549ae216d?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = 50.0755m,
                            Longitude = 14.4378m,
                            Name = "Prague",
                            Region = "Prague",
                            TotalReviews = 1654,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1450)
                        },
                        new
                        {
                            Id = 11,
                            AveragePriceLevel = 2,
                            AverageRating = 4.3m,
                            BestTimeToVisit = "May to September",
                            Climate = "Continental",
                            Country = "Germany",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1454),
                            Description = "A city where history meets cutting-edge culture, famous for its museums, nightlife, and contemporary art scene.",
                            ImageUrl = "https://images.unsplash.com/photo-1587330979470-3861ff3014e4?w=800",
                            IsActive = true,
                            IsFeatured = false,
                            Latitude = 52.5200m,
                            Longitude = 13.4050m,
                            Name = "Berlin",
                            Region = "Berlin",
                            TotalReviews = 2187,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1455)
                        },
                        new
                        {
                            Id = 12,
                            AveragePriceLevel = 2,
                            AverageRating = 4.8m,
                            BestTimeToVisit = "April to June, September to October",
                            Climate = "Mediterranean",
                            Country = "Italy",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1460),
                            Description = "The birthplace of Renaissance art and culture, featuring world-class museums, stunning architecture, and Tuscan cuisine.",
                            ImageUrl = "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = 43.7696m,
                            Longitude = 11.2558m,
                            Name = "Florence",
                            Region = "Tuscany",
                            TotalReviews = 1321,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1460)
                        },
                        new
                        {
                            Id = 13,
                            AveragePriceLevel = 1,
                            AverageRating = 4.5m,
                            BestTimeToVisit = "March to May, September to November",
                            Climate = "Continental",
                            Country = "Hungary",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1465),
                            Description = "The Pearl of the Danube, famous for its thermal baths, stunning architecture, and vibrant ruin bar scene.",
                            ImageUrl = "https://images.unsplash.com/photo-1541849546-216549ae216d?w=800",
                            IsActive = true,
                            IsFeatured = false,
                            Latitude = 47.4979m,
                            Longitude = 19.0402m,
                            Name = "Budapest",
                            Region = "Central Hungary",
                            TotalReviews = 1098,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1466)
                        },
                        new
                        {
                            Id = 14,
                            AveragePriceLevel = 2,
                            AverageRating = 4.6m,
                            BestTimeToVisit = "March to May, September to October",
                            Climate = "Mediterranean",
                            Country = "Portugal",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1471),
                            Description = "A coastal capital with colorful architecture, historic trams, vibrant neighborhoods, and incredible seafood.",
                            ImageUrl = "https://images.unsplash.com/photo-1555881400-74d7acaacd8b?w=800",
                            IsActive = true,
                            IsFeatured = false,
                            Latitude = 38.7223m,
                            Longitude = -9.1393m,
                            Name = "Lisbon",
                            Region = "Lisbon",
                            TotalReviews = 876,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1471)
                        },
                        new
                        {
                            Id = 15,
                            AveragePriceLevel = 3,
                            AverageRating = 4.4m,
                            BestTimeToVisit = "May to September",
                            Climate = "Continental",
                            Country = "Sweden",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1476),
                            Description = "A stunning Nordic capital built on 14 islands, known for its design, museums, and beautiful archipelago.",
                            ImageUrl = "https://images.unsplash.com/photo-1509356843151-3e7d96241e11?w=800",
                            IsActive = true,
                            IsFeatured = false,
                            Latitude = 59.3293m,
                            Longitude = 18.0686m,
                            Name = "Stockholm",
                            Region = "Stockholm County",
                            TotalReviews = 743,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1477)
                        },
                        new
                        {
                            Id = 16,
                            AveragePriceLevel = 3,
                            AverageRating = 4.5m,
                            BestTimeToVisit = "May to August",
                            Climate = "Oceanic",
                            Country = "Denmark",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1482),
                            Description = "A design-forward Scandinavian capital famous for hygge culture, cycling, innovative cuisine, and colorful harbors.",
                            ImageUrl = "https://images.unsplash.com/photo-1513622470522-26c3c8a854bc?w=800",
                            IsActive = true,
                            IsFeatured = false,
                            Latitude = 55.6761m,
                            Longitude = 12.5683m,
                            Name = "Copenhagen",
                            Region = "Capital Region",
                            TotalReviews = 892,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1483)
                        },
                        new
                        {
                            Id = 17,
                            AveragePriceLevel = 2,
                            AverageRating = 4.3m,
                            BestTimeToVisit = "April to June, September to October",
                            Climate = "Temperate oceanic",
                            Country = "Ireland",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1488),
                            Description = "A friendly capital known for its literary heritage, traditional pubs, Georgian architecture, and warm hospitality.",
                            ImageUrl = "https://images.unsplash.com/photo-1549918864-48ac978761a4?w=800",
                            IsActive = true,
                            IsFeatured = false,
                            Latitude = 53.3498m,
                            Longitude = -6.2603m,
                            Name = "Dublin",
                            Region = "Leinster",
                            TotalReviews = 654,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1488)
                        },
                        new
                        {
                            Id = 18,
                            AveragePriceLevel = 2,
                            AverageRating = 4.6m,
                            BestTimeToVisit = "May to September",
                            Climate = "Temperate oceanic",
                            Country = "Scotland",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1493),
                            Description = "A medieval city with a dramatic castle, rich history, world-famous festivals, and stunning highland landscapes nearby.",
                            ImageUrl = "https://images.unsplash.com/photo-1549918864-48ac978761a4?w=800",
                            IsActive = true,
                            IsFeatured = false,
                            Latitude = 55.9533m,
                            Longitude = -3.1883m,
                            Name = "Edinburgh",
                            Region = "Scotland",
                            TotalReviews = 567,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1494)
                        },
                        new
                        {
                            Id = 19,
                            AveragePriceLevel = 3,
                            AverageRating = 4.4m,
                            BestTimeToVisit = "April to June, September to October",
                            Climate = "Continental",
                            Country = "Switzerland",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1499),
                            Description = "A pristine city combining financial prowess with natural beauty, featuring mountains, lakes, and world-class amenities.",
                            ImageUrl = "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800",
                            IsActive = true,
                            IsFeatured = false,
                            Latitude = 47.3769m,
                            Longitude = 8.5417m,
                            Name = "Zurich",
                            Region = "Zurich",
                            TotalReviews = 432,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1499)
                        },
                        new
                        {
                            Id = 20,
                            AveragePriceLevel = 1,
                            AverageRating = 4.2m,
                            BestTimeToVisit = "April to June, September to November",
                            Climate = "Mediterranean",
                            Country = "Greece",
                            CreatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1504),
                            Description = "The cradle of democracy and Western civilization, home to ancient monuments, vibrant neighborhoods, and Mediterranean culture.",
                            ImageUrl = "https://images.unsplash.com/photo-1555993539-1732b0258235?w=800",
                            IsActive = true,
                            IsFeatured = false,
                            Latitude = 37.9838m,
                            Longitude = 23.7275m,
                            Name = "Athens",
                            Region = "Attica",
                            TotalReviews = 1234,
                            UpdatedAt = new DateTime(2025, 9, 18, 16, 9, 21, 390, DateTimeKind.Utc).AddTicks(1505)
                        });
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.DestinationImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Caption")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId", "SortOrder");

                    b.ToTable("DestinationImages");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.DestinationTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.ToTable("DestinationTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DestinationId = 1,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 2,
                            DestinationId = 1,
                            TagName = "Art"
                        },
                        new
                        {
                            Id = 3,
                            DestinationId = 1,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 4,
                            DestinationId = 1,
                            TagName = "Fashion"
                        },
                        new
                        {
                            Id = 5,
                            DestinationId = 1,
                            TagName = "Food"
                        },
                        new
                        {
                            Id = 6,
                            DestinationId = 2,
                            TagName = "Technology"
                        },
                        new
                        {
                            Id = 7,
                            DestinationId = 2,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 8,
                            DestinationId = 2,
                            TagName = "Food"
                        },
                        new
                        {
                            Id = 9,
                            DestinationId = 2,
                            TagName = "Shopping"
                        },
                        new
                        {
                            Id = 10,
                            DestinationId = 2,
                            TagName = "Nightlife"
                        },
                        new
                        {
                            Id = 11,
                            DestinationId = 3,
                            TagName = "Beach"
                        },
                        new
                        {
                            Id = 12,
                            DestinationId = 3,
                            TagName = "Romance"
                        },
                        new
                        {
                            Id = 13,
                            DestinationId = 3,
                            TagName = "Sunset"
                        },
                        new
                        {
                            Id = 14,
                            DestinationId = 3,
                            TagName = "Photography"
                        },
                        new
                        {
                            Id = 15,
                            DestinationId = 3,
                            TagName = "Wine"
                        },
                        new
                        {
                            Id = 16,
                            DestinationId = 4,
                            TagName = "Beach"
                        },
                        new
                        {
                            Id = 17,
                            DestinationId = 4,
                            TagName = "Nature"
                        },
                        new
                        {
                            Id = 18,
                            DestinationId = 4,
                            TagName = "Spiritual"
                        },
                        new
                        {
                            Id = 19,
                            DestinationId = 4,
                            TagName = "Adventure"
                        },
                        new
                        {
                            Id = 20,
                            DestinationId = 4,
                            TagName = "Wellness"
                        },
                        new
                        {
                            Id = 21,
                            DestinationId = 5,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 22,
                            DestinationId = 5,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 23,
                            DestinationId = 5,
                            TagName = "Art"
                        },
                        new
                        {
                            Id = 24,
                            DestinationId = 5,
                            TagName = "Food"
                        },
                        new
                        {
                            Id = 25,
                            DestinationId = 5,
                            TagName = "Architecture"
                        },
                        new
                        {
                            Id = 26,
                            DestinationId = 6,
                            TagName = "Architecture"
                        },
                        new
                        {
                            Id = 27,
                            DestinationId = 6,
                            TagName = "Beach"
                        },
                        new
                        {
                            Id = 28,
                            DestinationId = 6,
                            TagName = "Nightlife"
                        },
                        new
                        {
                            Id = 29,
                            DestinationId = 6,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 30,
                            DestinationId = 6,
                            TagName = "Food"
                        },
                        new
                        {
                            Id = 31,
                            DestinationId = 7,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 32,
                            DestinationId = 7,
                            TagName = "Art"
                        },
                        new
                        {
                            Id = 33,
                            DestinationId = 7,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 34,
                            DestinationId = 7,
                            TagName = "Nightlife"
                        },
                        new
                        {
                            Id = 35,
                            DestinationId = 7,
                            TagName = "Architecture"
                        },
                        new
                        {
                            Id = 36,
                            DestinationId = 8,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 37,
                            DestinationId = 8,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 38,
                            DestinationId = 8,
                            TagName = "Theater"
                        },
                        new
                        {
                            Id = 39,
                            DestinationId = 8,
                            TagName = "Museums"
                        },
                        new
                        {
                            Id = 40,
                            DestinationId = 8,
                            TagName = "Shopping"
                        },
                        new
                        {
                            Id = 41,
                            DestinationId = 9,
                            TagName = "Music"
                        },
                        new
                        {
                            Id = 42,
                            DestinationId = 9,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 43,
                            DestinationId = 9,
                            TagName = "Architecture"
                        },
                        new
                        {
                            Id = 44,
                            DestinationId = 9,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 45,
                            DestinationId = 9,
                            TagName = "Coffee"
                        },
                        new
                        {
                            Id = 46,
                            DestinationId = 10,
                            TagName = "Architecture"
                        },
                        new
                        {
                            Id = 47,
                            DestinationId = 10,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 48,
                            DestinationId = 10,
                            TagName = "Nightlife"
                        },
                        new
                        {
                            Id = 49,
                            DestinationId = 10,
                            TagName = "Budget"
                        },
                        new
                        {
                            Id = 50,
                            DestinationId = 10,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 51,
                            DestinationId = 11,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 52,
                            DestinationId = 11,
                            TagName = "Nightlife"
                        },
                        new
                        {
                            Id = 53,
                            DestinationId = 11,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 54,
                            DestinationId = 11,
                            TagName = "Art"
                        },
                        new
                        {
                            Id = 55,
                            DestinationId = 11,
                            TagName = "Museums"
                        },
                        new
                        {
                            Id = 56,
                            DestinationId = 12,
                            TagName = "Art"
                        },
                        new
                        {
                            Id = 57,
                            DestinationId = 12,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 58,
                            DestinationId = 12,
                            TagName = "Architecture"
                        },
                        new
                        {
                            Id = 59,
                            DestinationId = 12,
                            TagName = "Food"
                        },
                        new
                        {
                            Id = 60,
                            DestinationId = 12,
                            TagName = "Renaissance"
                        },
                        new
                        {
                            Id = 61,
                            DestinationId = 13,
                            TagName = "Architecture"
                        },
                        new
                        {
                            Id = 62,
                            DestinationId = 13,
                            TagName = "Thermal Baths"
                        },
                        new
                        {
                            Id = 63,
                            DestinationId = 13,
                            TagName = "Nightlife"
                        },
                        new
                        {
                            Id = 64,
                            DestinationId = 13,
                            TagName = "Budget"
                        },
                        new
                        {
                            Id = 65,
                            DestinationId = 13,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 66,
                            DestinationId = 14,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 67,
                            DestinationId = 14,
                            TagName = "Architecture"
                        },
                        new
                        {
                            Id = 68,
                            DestinationId = 14,
                            TagName = "Food"
                        },
                        new
                        {
                            Id = 69,
                            DestinationId = 14,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 70,
                            DestinationId = 14,
                            TagName = "Ocean"
                        },
                        new
                        {
                            Id = 71,
                            DestinationId = 15,
                            TagName = "Design"
                        },
                        new
                        {
                            Id = 72,
                            DestinationId = 15,
                            TagName = "Museums"
                        },
                        new
                        {
                            Id = 73,
                            DestinationId = 15,
                            TagName = "Architecture"
                        },
                        new
                        {
                            Id = 74,
                            DestinationId = 15,
                            TagName = "Nature"
                        },
                        new
                        {
                            Id = 75,
                            DestinationId = 15,
                            TagName = "Peaceful"
                        },
                        new
                        {
                            Id = 76,
                            DestinationId = 16,
                            TagName = "Design"
                        },
                        new
                        {
                            Id = 77,
                            DestinationId = 16,
                            TagName = "Food"
                        },
                        new
                        {
                            Id = 78,
                            DestinationId = 16,
                            TagName = "Architecture"
                        },
                        new
                        {
                            Id = 79,
                            DestinationId = 16,
                            TagName = "Hygge"
                        },
                        new
                        {
                            Id = 80,
                            DestinationId = 16,
                            TagName = "Cycling"
                        },
                        new
                        {
                            Id = 81,
                            DestinationId = 17,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 82,
                            DestinationId = 17,
                            TagName = "Literature"
                        },
                        new
                        {
                            Id = 83,
                            DestinationId = 17,
                            TagName = "Pubs"
                        },
                        new
                        {
                            Id = 84,
                            DestinationId = 17,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 85,
                            DestinationId = 17,
                            TagName = "Friendly"
                        },
                        new
                        {
                            Id = 86,
                            DestinationId = 18,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 87,
                            DestinationId = 18,
                            TagName = "Architecture"
                        },
                        new
                        {
                            Id = 88,
                            DestinationId = 18,
                            TagName = "Festivals"
                        },
                        new
                        {
                            Id = 89,
                            DestinationId = 18,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 90,
                            DestinationId = 18,
                            TagName = "Nature"
                        },
                        new
                        {
                            Id = 91,
                            DestinationId = 19,
                            TagName = "Nature"
                        },
                        new
                        {
                            Id = 92,
                            DestinationId = 19,
                            TagName = "Peaceful"
                        },
                        new
                        {
                            Id = 93,
                            DestinationId = 19,
                            TagName = "Luxury"
                        },
                        new
                        {
                            Id = 94,
                            DestinationId = 19,
                            TagName = "Mountains"
                        },
                        new
                        {
                            Id = 95,
                            DestinationId = 19,
                            TagName = "Clean"
                        },
                        new
                        {
                            Id = 96,
                            DestinationId = 20,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 97,
                            DestinationId = 20,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 98,
                            DestinationId = 20,
                            TagName = "Architecture"
                        },
                        new
                        {
                            Id = 99,
                            DestinationId = 20,
                            TagName = "Budget"
                        },
                        new
                        {
                            Id = 100,
                            DestinationId = 20,
                            TagName = "Ancient"
                        });
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AttractionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HelpfulVotes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalVotes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.ReviewHelpful", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHelpful")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReviewId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ReviewId", "UserId")
                        .IsUnique();

                    b.ToTable("ReviewHelpful");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.UserFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("UserId", "DestinationId")
                        .IsUnique();

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.UserPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LikesAdventure")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesBeach")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesCulture")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesFoodTourism")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesHistory")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesMountains")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesNightlife")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesShopping")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PreferredBudget")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreferredClimate")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("PreferredGroupSize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PreferredTripDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TravelStyle")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Attraction", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Destination", "Destination")
                        .WithMany("Attractions")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Booking", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Destination", "Destination")
                        .WithMany("Bookings")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.DestinationImage", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Destination", "Destination")
                        .WithMany("Images")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.DestinationTag", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Destination", "Destination")
                        .WithMany("Tags")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Review", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Attraction", "Attraction")
                        .WithMany("Reviews")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TravelRecommendationSystem.Models.Destination", "Destination")
                        .WithMany("Reviews")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Destination");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.ReviewHelpful", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Review", "Review")
                        .WithMany("ReviewHelpful")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.UserFavorite", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Destination", "Destination")
                        .WithMany("UserFavorites")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.UserPreferences", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", "User")
                        .WithOne("UserPreferences")
                        .HasForeignKey("TravelRecommendationSystem.Models.UserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Favorites");

                    b.Navigation("Reviews");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Attraction", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Destination", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Bookings");

                    b.Navigation("Images");

                    b.Navigation("Reviews");

                    b.Navigation("Tags");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Review", b =>
                {
                    b.Navigation("ReviewHelpful");
                });
#pragma warning restore 612, 618
        }
    }
}
