// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelRecommendationSystem.Data;

#nullable disable

namespace TravelRecommendationSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250918142727_AddBookingDetailsProperties")]
    partial class AddBookingDetailsProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Attraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("EntryFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpeningHours")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.ToTable("Attractions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Champ de Mars, 5 Avenue Anatole France, 75007 Paris",
                            AverageRating = 4.5m,
                            Category = "Landmark",
                            CreatedAt = new DateTime(2025, 9, 18, 14, 27, 26, 984, DateTimeKind.Utc).AddTicks(8827),
                            Description = "Iconic iron tower and symbol of Paris, offering panoramic views of the city.",
                            DestinationId = 1,
                            EntryFee = 26.80m,
                            ImageUrl = "https://images.unsplash.com/photo-1511739001486-6bfe10ce785f?w=800",
                            IsActive = true,
                            Latitude = 48.8584m,
                            Longitude = 2.2945m,
                            Name = "Eiffel Tower",
                            OpeningHours = "9:30 AM - 11:45 PM",
                            TotalReviews = 2341,
                            UpdatedAt = new DateTime(2025, 9, 18, 14, 27, 26, 984, DateTimeKind.Utc).AddTicks(8827)
                        },
                        new
                        {
                            Id = 2,
                            Address = "2 Chome-3-1 Asakusa, Taito City, Tokyo",
                            AverageRating = 4.6m,
                            Category = "Temple",
                            CreatedAt = new DateTime(2025, 9, 18, 14, 27, 26, 984, DateTimeKind.Utc).AddTicks(8832),
                            Description = "Ancient Buddhist temple and Tokyo's oldest, located in Asakusa district.",
                            DestinationId = 2,
                            EntryFee = 0m,
                            ImageUrl = "https://images.unsplash.com/photo-1545569341-9eb8b30979d9?w=800",
                            IsActive = true,
                            Latitude = 35.7148m,
                            Longitude = 139.7967m,
                            Name = "Senso-ji Temple",
                            OpeningHours = "6:00 AM - 5:00 PM",
                            TotalReviews = 1876,
                            UpdatedAt = new DateTime(2025, 9, 18, 14, 27, 26, 984, DateTimeKind.Utc).AddTicks(8833)
                        });
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccommodationType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Adults")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BookingReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("BookingType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Children")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConfirmationEmailSent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<int>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FlightIncluded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProviderBookingUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("TransferIncluded")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AveragePriceLevel")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("BestTimeToVisit")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Climate")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AveragePriceLevel = 3,
                            AverageRating = 4.6m,
                            BestTimeToVisit = "April to June, September to October",
                            Climate = "Temperate oceanic",
                            Country = "France",
                            CreatedAt = new DateTime(2025, 9, 18, 14, 27, 26, 984, DateTimeKind.Utc).AddTicks(8507),
                            Description = "The City of Light, known for its art, fashion, gastronomy, and culture. Home to iconic landmarks like the Eiffel Tower and Louvre Museum.",
                            ImageUrl = "https://images.unsplash.com/photo-1502602898536-47ad22581b52?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = 48.8566m,
                            Longitude = 2.3522m,
                            Name = "Paris",
                            Region = "Île-de-France",
                            TotalReviews = 1245,
                            UpdatedAt = new DateTime(2025, 9, 18, 14, 27, 26, 984, DateTimeKind.Utc).AddTicks(8507)
                        },
                        new
                        {
                            Id = 2,
                            AveragePriceLevel = 3,
                            AverageRating = 4.8m,
                            BestTimeToVisit = "March to May, September to November",
                            Climate = "Humid subtropical",
                            Country = "Japan",
                            CreatedAt = new DateTime(2025, 9, 18, 14, 27, 26, 984, DateTimeKind.Utc).AddTicks(8512),
                            Description = "A vibrant metropolis blending ultra-modern and traditional elements. Experience cutting-edge technology alongside ancient temples.",
                            ImageUrl = "https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = 35.6762m,
                            Longitude = 139.6503m,
                            Name = "Tokyo",
                            Region = "Kanto",
                            TotalReviews = 987,
                            UpdatedAt = new DateTime(2025, 9, 18, 14, 27, 26, 984, DateTimeKind.Utc).AddTicks(8512)
                        },
                        new
                        {
                            Id = 3,
                            AveragePriceLevel = 3,
                            AverageRating = 4.7m,
                            BestTimeToVisit = "April to early November",
                            Climate = "Mediterranean",
                            Country = "Greece",
                            CreatedAt = new DateTime(2025, 9, 18, 14, 27, 26, 984, DateTimeKind.Utc).AddTicks(8516),
                            Description = "A stunning Greek island known for its white-washed buildings, blue-domed churches, and breathtaking sunsets over the Aegean Sea.",
                            ImageUrl = "https://images.unsplash.com/photo-1613395877344-13d4a8e0d49e?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = 36.3932m,
                            Longitude = 25.4615m,
                            Name = "Santorini",
                            Region = "South Aegean",
                            TotalReviews = 756,
                            UpdatedAt = new DateTime(2025, 9, 18, 14, 27, 26, 984, DateTimeKind.Utc).AddTicks(8517)
                        },
                        new
                        {
                            Id = 4,
                            AveragePriceLevel = 2,
                            AverageRating = 4.5m,
                            BestTimeToVisit = "April to October",
                            Climate = "Tropical",
                            Country = "Indonesia",
                            CreatedAt = new DateTime(2025, 9, 18, 14, 27, 26, 984, DateTimeKind.Utc).AddTicks(8520),
                            Description = "A tropical paradise offering beautiful beaches, ancient temples, lush rice terraces, and a rich cultural heritage.",
                            ImageUrl = "https://images.unsplash.com/photo-1537953773345-d172ccf13cf1?w=800",
                            IsActive = true,
                            IsFeatured = true,
                            Latitude = -8.3405m,
                            Longitude = 115.0920m,
                            Name = "Bali",
                            Region = "Lesser Sunda Islands",
                            TotalReviews = 1123,
                            UpdatedAt = new DateTime(2025, 9, 18, 14, 27, 26, 984, DateTimeKind.Utc).AddTicks(8521)
                        });
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.DestinationImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Caption")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId", "SortOrder");

                    b.ToTable("DestinationImages");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.DestinationTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.ToTable("DestinationTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DestinationId = 1,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 2,
                            DestinationId = 1,
                            TagName = "Art"
                        },
                        new
                        {
                            Id = 3,
                            DestinationId = 1,
                            TagName = "History"
                        },
                        new
                        {
                            Id = 4,
                            DestinationId = 1,
                            TagName = "Fashion"
                        },
                        new
                        {
                            Id = 5,
                            DestinationId = 1,
                            TagName = "Food"
                        },
                        new
                        {
                            Id = 6,
                            DestinationId = 2,
                            TagName = "Technology"
                        },
                        new
                        {
                            Id = 7,
                            DestinationId = 2,
                            TagName = "Culture"
                        },
                        new
                        {
                            Id = 8,
                            DestinationId = 2,
                            TagName = "Food"
                        },
                        new
                        {
                            Id = 9,
                            DestinationId = 2,
                            TagName = "Shopping"
                        },
                        new
                        {
                            Id = 10,
                            DestinationId = 2,
                            TagName = "Nightlife"
                        },
                        new
                        {
                            Id = 11,
                            DestinationId = 3,
                            TagName = "Beach"
                        },
                        new
                        {
                            Id = 12,
                            DestinationId = 3,
                            TagName = "Romance"
                        },
                        new
                        {
                            Id = 13,
                            DestinationId = 3,
                            TagName = "Sunset"
                        },
                        new
                        {
                            Id = 14,
                            DestinationId = 3,
                            TagName = "Photography"
                        },
                        new
                        {
                            Id = 15,
                            DestinationId = 3,
                            TagName = "Wine"
                        },
                        new
                        {
                            Id = 16,
                            DestinationId = 4,
                            TagName = "Beach"
                        },
                        new
                        {
                            Id = 17,
                            DestinationId = 4,
                            TagName = "Nature"
                        },
                        new
                        {
                            Id = 18,
                            DestinationId = 4,
                            TagName = "Spiritual"
                        },
                        new
                        {
                            Id = 19,
                            DestinationId = 4,
                            TagName = "Adventure"
                        },
                        new
                        {
                            Id = 20,
                            DestinationId = 4,
                            TagName = "Wellness"
                        });
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AttractionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HelpfulVotes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalVotes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.ReviewHelpful", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHelpful")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReviewId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ReviewId", "UserId")
                        .IsUnique();

                    b.ToTable("ReviewHelpful");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.UserFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("UserId", "DestinationId")
                        .IsUnique();

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.UserPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LikesAdventure")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesBeach")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesCulture")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesFoodTourism")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesHistory")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesMountains")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesNightlife")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LikesShopping")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PreferredBudget")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreferredClimate")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("PreferredGroupSize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PreferredTripDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TravelStyle")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Attraction", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Destination", "Destination")
                        .WithMany("Attractions")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Booking", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Destination", "Destination")
                        .WithMany("Bookings")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.DestinationImage", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Destination", "Destination")
                        .WithMany("Images")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.DestinationTag", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Destination", "Destination")
                        .WithMany("Tags")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Review", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Attraction", "Attraction")
                        .WithMany("Reviews")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TravelRecommendationSystem.Models.Destination", "Destination")
                        .WithMany("Reviews")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Destination");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.ReviewHelpful", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Review", "Review")
                        .WithMany("ReviewHelpful")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.UserFavorite", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.Destination", "Destination")
                        .WithMany("UserFavorites")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.UserPreferences", b =>
                {
                    b.HasOne("TravelRecommendationSystem.Models.ApplicationUser", "User")
                        .WithOne("UserPreferences")
                        .HasForeignKey("TravelRecommendationSystem.Models.UserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Favorites");

                    b.Navigation("Reviews");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Attraction", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Destination", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Bookings");

                    b.Navigation("Images");

                    b.Navigation("Reviews");

                    b.Navigation("Tags");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("TravelRecommendationSystem.Models.Review", b =>
                {
                    b.Navigation("ReviewHelpful");
                });
#pragma warning restore 612, 618
        }
    }
}
