<!-- Travel Assistant Chatbot -->
<div id="chatbot-container" class="position-fixed" style="bottom: 20px; right: 20px; z-index: 1040;">
    <!-- Chat Toggle Button -->
    <button id="chatbot-toggle" class="btn btn-primary rounded-circle shadow-lg" 
            style="width: 60px; height: 60px; display: flex; align-items: center; justify-content: center;">
        <i id="chat-icon" class="fas fa-comments fa-lg"></i>
        <span id="chat-notification" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="display: none;">
            1
        </span>
    </button>

    <!-- Chat Window -->
    <div id="chatbot-window" class="card shadow-lg" style="width: 380px; height: 500px; display: none; bottom: 80px; position: absolute; right: 0;">
        <!-- Chat Header -->
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <div class="rounded-circle bg-white me-2" style="width: 32px; height: 32px; display: flex; align-items: center; justify-content: center;">
                    <i class="fas fa-robot text-primary"></i>
                </div>
                <div>
                    <h6 class="mb-0">Travel Assistant</h6>
                    <small class="opacity-75">Online</small>
                </div>
            </div>
            <button id="chatbot-close" class="btn-close btn-close-white"></button>
        </div>

        <!-- Chat Messages -->
        <div id="chat-messages" class="card-body p-3" style="height: 350px; overflow-y: auto; background-color: #f8f9fa;">
            <!-- Welcome Message -->
            <div class="message bot-message mb-3">
                <div class="d-flex align-items-start">
                    <div class="rounded-circle bg-primary me-2" style="width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; flex-shrink: 0;">
                        <i class="fas fa-robot text-white" style="font-size: 10px;"></i>
                    </div>
                    <div class="message-content bg-white rounded-3 p-2 shadow-sm" style="max-width: 85%;">
                        <div class="message-text">Hi there! üëã I'm your travel assistant. I can help you discover amazing destinations, find activities, and answer travel questions. What would you like to explore?</div>
                        <div class="message-time text-muted mt-1" style="font-size: 0.7rem;">Just now</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Chat Input -->
        <div class="card-footer p-3">
            <div class="input-group">
                <input type="text" id="chat-input" class="form-control" placeholder="Ask me about destinations..." maxlength="500">
                <button id="chat-send" class="btn btn-primary" type="button">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
            <div class="mt-2">
                <div class="d-flex flex-wrap gap-1">
                    <button class="btn btn-outline-secondary btn-sm quick-question" data-question="Show me beach destinations">
                        üèñÔ∏è Beaches
                    </button>
                    <button class="btn btn-outline-secondary btn-sm quick-question" data-question="What can I do in Paris?">
                        üóº Paris
                    </button>
                    <button class="btn btn-outline-secondary btn-sm quick-question" data-question="Adventure destinations">
                        üèîÔ∏è Adventure
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
#chatbot-container {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
}

#chatbot-toggle {
    transition: all 0.3s ease;
    border: none;
    background: linear-gradient(135deg, #007bff, #0056b3);
}

#chatbot-toggle:hover {
    transform: scale(1.05);
    box-shadow: 0 8px 25px rgba(0, 123, 255, 0.3) !important;
}

#chatbot-window {
    transition: all 0.3s ease;
    border: none;
    border-radius: 15px;
    overflow: hidden;
}

.message {
    animation: slideInMessage 0.3s ease-out;
}

@@keyframes slideInMessage {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.user-message .message-content {
    background: linear-gradient(135deg, #007bff, #0056b3);
    color: white;
    margin-left: auto;
}

.bot-message .message-content {
    background: white;
    border: 1px solid #e9ecef;
}

.message-text {
    line-height: 1.4;
    word-wrap: break-word;
    white-space: pre-line;
}

.quick-question {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
}

.quick-question:hover {
    background-color: #007bff;
    color: white;
    border-color: #007bff;
}

#chat-input:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.typing-indicator {
    display: flex;
    align-items: center;
    padding: 0.5rem;
}

.typing-dots {
    display: flex;
    align-items: center;
}

.typing-dots span {
    width: 6px;
    height: 6px;
    background-color: #6c757d;
    border-radius: 50%;
    margin: 0 1px;
    animation: typing 1.4s infinite ease-in-out;
}

.typing-dots span:nth-child(1) { animation-delay: -0.32s; }
.typing-dots span:nth-child(2) { animation-delay: -0.16s; }

@@keyframes typing {
    0%, 80%, 100% {
        transform: scale(0);
        opacity: 0.5;
    }
    40% {
        transform: scale(1);
        opacity: 1;
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const chatToggle = document.getElementById('chatbot-toggle');
    const chatWindow = document.getElementById('chatbot-window');
    const chatClose = document.getElementById('chatbot-close');
    const chatInput = document.getElementById('chat-input');
    const chatSend = document.getElementById('chat-send');
    const chatMessages = document.getElementById('chat-messages');
    const chatIcon = document.getElementById('chat-icon');
    const quickQuestions = document.querySelectorAll('.quick-question');

    let isOpen = false;

    // Toggle chat window
    chatToggle.addEventListener('click', function() {
        isOpen = !isOpen;
        if (isOpen) {
            chatWindow.style.display = 'block';
            chatIcon.className = 'fas fa-times fa-lg';
            chatInput.focus();
        } else {
            chatWindow.style.display = 'none';
            chatIcon.className = 'fas fa-comments fa-lg';
        }
    });

    // Close chat window
    chatClose.addEventListener('click', function() {
        isOpen = false;
        chatWindow.style.display = 'none';
        chatIcon.className = 'fas fa-comments fa-lg';
    });

    // Send message on button click
    chatSend.addEventListener('click', sendMessage);

    // Send message on Enter key
    chatInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    // Quick question buttons
    quickQuestions.forEach(button => {
        button.addEventListener('click', function() {
            const question = this.getAttribute('data-question');
            chatInput.value = question;
            sendMessage();
        });
    });

    async function sendMessage() {
        const message = chatInput.value.trim();
        if (!message) return;

        // Add user message to chat
        addMessage(message, 'user');
        chatInput.value = '';

        // Show typing indicator
        showTypingIndicator();

        try {
            // Send message to chatbot API
            const response = await fetch('/Chatbot/GetResponse', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ content: message })
            });

            const data = await response.json();
            
            // Remove typing indicator and add bot response
            hideTypingIndicator();
            setTimeout(() => {
                if (data.success !== false) {
                    addMessage(data.response || data.Response, 'bot');
                } else {
                    addMessage(data.response || 'Sorry, I\'m having trouble right now. Please try again.', 'bot');
                }
            }, 500);

        } catch (error) {
            hideTypingIndicator();
            addMessage('Sorry, I\'m having trouble connecting. Please try again later.', 'bot');
            console.error('Chatbot error:', error);
        }
    }

    function addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message mb-3`;
        
        const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        if (sender === 'user') {
            messageDiv.innerHTML = `
                <div class="d-flex align-items-start justify-content-end">
                    <div class="message-content bg-primary text-white rounded-3 p-2 shadow-sm" style="max-width: 85%;">
                        <div class="message-text">${escapeHtml(text)}</div>
                        <div class="message-time text-white-50 mt-1" style="font-size: 0.7rem;">${timestamp}</div>
                    </div>
                    <div class="rounded-circle bg-secondary ms-2" style="width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; flex-shrink: 0;">
                        <i class="fas fa-user text-white" style="font-size: 10px;"></i>
                    </div>
                </div>
            `;
        } else {
            messageDiv.innerHTML = `
                <div class="d-flex align-items-start">
                    <div class="rounded-circle bg-primary me-2" style="width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; flex-shrink: 0;">
                        <i class="fas fa-robot text-white" style="font-size: 10px;"></i>
                    </div>
                    <div class="message-content bg-white rounded-3 p-2 shadow-sm border" style="max-width: 85%;">
                        <div class="message-text">${formatBotMessage(text)}</div>
                        <div class="message-time text-muted mt-1" style="font-size: 0.7rem;">${timestamp}</div>
                    </div>
                </div>
            `;
        }

        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function showTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.id = 'typing-indicator';
        typingDiv.className = 'message bot-message mb-3';
        typingDiv.innerHTML = `
            <div class="d-flex align-items-start">
                <div class="rounded-circle bg-primary me-2" style="width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; flex-shrink: 0;">
                    <i class="fas fa-robot text-white" style="font-size: 10px;"></i>
                </div>
                <div class="message-content bg-white rounded-3 p-2 shadow-sm border">
                    <div class="typing-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        `;
        chatMessages.appendChild(typingDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function hideTypingIndicator() {
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    function formatBotMessage(text) {
        // Convert markdown-like formatting to HTML
        return text
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // **bold**
            .replace(/\*(.*?)\*/g, '<em>$1</em>') // *italic*
            .replace(/\n/g, '<br>') // line breaks
            .replace(/‚Ä¢/g, '‚Ä¢'); // bullet points
    }
});
</script>
